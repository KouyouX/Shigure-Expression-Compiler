package org.owari.shigure.codegen

import org.owari.shigure.SExprImpl

import org.objectweb.asm.ClassWriter
import org.objectweb.asm.MethodVisitor
import org.objectweb.asm.Opcodes
import org.owari.shigure.Shigure
import org.owari.shigure.ast.*
import java.util.concurrent.atomic.AtomicInteger

private object SExprClassLoader : ClassLoader(Shigure.javaClass.classLoader) {
    fun define(name: String, code: ByteArray): Class<*> = defineClass(name, code, 0, code.size)
}

/**
 * @author Mochizuki Haruka
 * codeGenerator 的默认实现.
 */
object SCodeGenerator {
    @JvmStatic
    fun generate(ast: SExprNode): SExprImpl {
        val name = "org/owari/shigure/generated/SExprImpl\$${id.getAndIncrement()}"
        val cw = ClassWriter(ClassWriter.COMPUTE_FRAMES or ClassWriter.COMPUTE_MAXS)
        cw.visit(
            52,
            Opcodes.ACC_PUBLIC or Opcodes.ACC_SUPER or Opcodes.ACC_FINAL,
            name,
            null,
            "org/owari/shigure/SExprImpl",
            null
        )
        cw.visitSource("<generated by ShigureExprCompiler>", null)
        cw.visitMethod(Opcodes.ACC_PUBLIC, "<init>", "()V", null, null)
        val mw = cw.visitMethod(
            Opcodes.ACC_PUBLIC or Opcodes.ACC_FINAL, "eval", "(Lorg/owari/shigure/SContext;)D", null, null
        )
        emitPrologue(mw)
        emit(mw, ast)
        emitEpilogue(mw)
        return assembly(name, cw.toByteArray())
    }

    @JvmStatic
    private var id = AtomicInteger(0)

    @JvmStatic
    private fun emitPrologue(mv: MethodVisitor) {
        mv.visitCode()
    }

    @JvmStatic
    private fun emitEpilogue(mv: MethodVisitor) {
        mv.visitMaxs(0, 0)
        mv.visitEnd()
    }

    @JvmStatic
    private fun emit(mv: MethodVisitor, e: SExprNode) {
        when (e) {
            is SUnaryExprNode -> emit(mv, e)
            is SBinaryExprNode -> emit(mv, e)
            is SVarAccessNode -> emit(mv, e)
            is SConstNumNode -> emit(mv, e)
            is SFnCallNode -> emit(mv, e)
        }
    }

    @JvmStatic
    private fun emit(mv: MethodVisitor, e: SUnaryExprNode) {}
    @JvmStatic
    private fun emit(mv: MethodVisitor, e: SBinaryExprNode) {}
    @JvmStatic
    private fun emit(mv: MethodVisitor, e: SVarAccessNode) {}
    @JvmStatic
    private fun emit(mv: MethodVisitor, e: SConstNumNode) {}
    @JvmStatic
    private fun emit(mv: MethodVisitor, e: SFnCallNode) {
        e.args.forEach { emit(mv, it) }
        mv.visitIntInsn(Opcodes.NEWARRAY, Opcodes.T_DOUBLE)
    }

    @JvmStatic
    private fun assembly(name: String, code: ByteArray): SExprImpl {
        val clazz = SExprClassLoader.define(name, code)
        assert(clazz.isAssignableFrom(clazz))
        return clazz.getDeclaredConstructor().newInstance() as SExprImpl
    }
}
