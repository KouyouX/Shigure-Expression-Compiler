package org.owari.shigure.impl

import org.objectweb.asm.*

/**
 * @author Mochizuki Haruka
 * codeGenerator 的默认实现.
 */
class CodeGenerator(
    private val os: OpcodeSet,
    clazzName: String
) {
    private val clazzFileName = clazzName.replace('.', '/')
    private val cw = ClassWriter(ClassWriter.COMPUTE_FRAMES or ClassWriter.COMPUTE_MAXS)

    init {
        cw.visit(52, Opcodes.ACC_PUBLIC or Opcodes.ACC_SUPER or Opcodes.ACC_FINAL, clazzFileName,
            null, "org/owari/shigure/impl/CalcFunc", null)
        cw.visitSource("<generated by ShigureExprCompiler>", null)
        val con = cw.visitMethod(Opcodes.ACC_PUBLIC, "<init>", "()V", null, null)
        con.visitCode()
        con.visitIntInsn(Opcodes.ALOAD, 0)
        con.visitMethodInsn(Opcodes.INVOKESPECIAL, "org/owari/shigure/impl/CalcFunc", "<init>", "()V", false)
        con.visitInsn(Opcodes.RETURN)
        con.visitMaxs(0, 0)
        con.visitEnd()
    }

    private val mw = cw.visitMethod(Opcodes.ACC_PUBLIC or Opcodes.ACC_FINAL, "invoke",
        "(Lorg/owari/shigure/Context;)D", null, null)

    // local[0] = this, local[1] = Context object, local[i..j] = variables
    private val varSize = 2
    private var currentOffset = 2
    private val varMap = hashMapOf<String, Int>()
    private fun address(name: String): Int = varMap.getOrPut(name) { currentOffset.also { currentOffset += varSize } }

    fun generate(): ByteArray {
        emitPrologue()
        emitCode()
        emitEpilogue()
        return cw.toByteArray()
    }

    private inline fun emitPrologue() {
        mw.visitCode()
        mw.visitVarInsn(Opcodes.ALOAD, 1) // load SContext into stack
        os.usedVars.forEach {
            mw.visitInsn(Opcodes.DUP) // duplicate SContext
            mw.visitLdcInsn(it) // load variable name into stack
            mw.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "org/owari/shigure/Context", "get", "(Ljava/lang/String;)D", false)
            mw.visitVarInsn(Opcodes.DSTORE, address(it)) // store variable into local
        }
        mw.visitInsn(Opcodes.POP) // pop SContext
    }

    private inline fun emitEpilogue() {
        mw.visitInsn(Opcodes.DRETURN)
        mw.visitMaxs(0, 0)
        mw.visitEnd()
    }

    private inline fun emitCode() {
        os.opcodes.forEach {
            when(it.op) {
                Opcode.PUSH -> mw.visitLdcInsn(it.argD)
                Opcode.PRECALL -> {
                    mw.visitVarInsn(Opcodes.ALOAD, 1)
                    mw.visitLdcInsn(it.argN)
                    mw.visitIntInsn(Opcodes.BIPUSH, it.argI)
                    mw.visitIntInsn(Opcodes.NEWARRAY, Opcodes.T_DOUBLE)
                }
                Opcode.PUSHARG -> {
                    mw.visitInsn(Opcodes.DUP)
                    mw.visitIntInsn(Opcodes.BIPUSH, it.argI)
                }
                Opcode.ENDARG -> mw.visitInsn(Opcodes.DASTORE)
                Opcode.CALL -> mw.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "org/owari/shigure/Context", "call", "(Ljava/lang/String;[D)D", false)
                Opcode.LOADVAR -> mw.visitVarInsn(Opcodes.DLOAD, address(it.argN))
                Opcode.ADD -> mw.visitInsn(Opcodes.DADD)
                Opcode.SUB -> mw.visitInsn(Opcodes.DSUB)
                Opcode.MUL -> mw.visitInsn(Opcodes.DMUL)
                Opcode.DIV -> mw.visitInsn(Opcodes.DDIV)
                Opcode.MOD -> mw.visitInsn(Opcodes.DREM)
                Opcode.POW -> mw.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/Math", "pow", "(DD)D", false)
                Opcode.NEG -> mw.visitInsn(Opcodes.DNEG)
                Opcode.FLOORDIV -> {
                    mw.visitInsn(Opcodes.DDIV)
                    mw.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/Math", "floor", "(D)D", false)
                }
                else -> throw UnsupportedOperationException("Unsupported opcode: ${it.op}")
            }
        }
    }
}
